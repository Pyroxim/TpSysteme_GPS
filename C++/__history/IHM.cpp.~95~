//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop
#include "IHM.h"
#include <string.h>
#include <deque>
#include <vector>
#include <sstream>
#define __WIN__
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	gps = new GPS();

	sync = CreateMutex(NULL, FALSE, NULL);
}
//---------------------------------------------------------------------------
//Bouton d'ouverture du port
void __fastcall TForm1::Button1Click(TObject *Sender)
{
	if(gps->ouvrirPort())
	{
        DWORD threadId;
		CreateThread(NULL, 0, &RecvThread, this, 0, &threadId);
		Timer1->Enabled = true;
		Button1->Enabled = false;
        Button2->Enabled = true;
        Button3->Enabled = true;
	}
	else
	{
        char buffer[20];

		itoa(GetLastError(),buffer,10);
		MessageBox(NULL, buffer, "Fail", 0);
    }
}
//---------------------------------------------------------------------------
//Bouton pour lancer la lecture des trames sur le port
void __fastcall TForm1::Button3Click(TObject *Sender)
{
	int i=0;
	gps->lirePort();
	std::deque<char> & buf = gps->getRecvBuf();

	UnicodeString str = "";
	MemoGlobal->Visible = true;
}
//---------------------------------------------------------------------------
//Bouton de fermeture du port
void __fastcall TForm1::Button2Click(TObject *Sender)
{
	Button3->Enabled = false;
    Button2->Enabled = false;
    Button1->Enabled = true;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
	WaitForSingleObject(sync, INFINITE);

	UnicodeString longitudedegres = "";
	UnicodeString longitudesecondes = "";
	UnicodeString longitudeminutes = "";
	UnicodeString latitudedegres = "";
	UnicodeString latitudesecondes = "";
	UnicodeString latitudeminutes = "";
	UnicodeString Profondeur = "";
	UnicodeString Temperature = "";
	UnicodeString str = "";

	std::stringstream stringbuilder;


	for(int j = 0; j < trames.size(); j++)
	{
		std::vector<char> buf = trames[j];

		int i = 0;

		do
		{
		if (buf[i] == '$' && buf[i+1] == 'G' && buf[i+2] == 'P' && buf[i+3] == 'G' && buf[i+4] == 'G' && buf[i+5] == 'A') {
			int j=i+6;
			if (buf[j]== ','){
				int z=j+8;
				for (int k = 0; k < 10; k++)
				{
					if (k==1){
						latitudedegres +=buf[z-1];
					}
					if (k==2) {
						latitudedegres +=buf[z-1];
					}
					if (k==3)  {
						latitudeminutes += buf[z-1];
					}
					if (k==4) {
						latitudeminutes += buf[z-1];
						latitudeminutes = (latitudeminutes/60);
					}
					if (k==6) {
						latitudesecondes += buf[z-1];
					}
					if (k==7) {
						latitudesecondes += buf[z-1];
						latitudesecondes = (latitudesecondes/3600);
					}
					if (k==9) {
						z++;
					}
					z++;
				}
				z++;

				latitude = (latitudedegres.ToDouble()+latitudeminutes.ToDouble()+latitudesecondes.ToDouble());

				for (int k = 10; k < 21; k++)
				{

					if (k==11){
						longitudedegres +=buf[z-1];
					}
					if (k==12) {
						longitudedegres +=buf[z-1];
					}
					if (k==13)  {
						longitudedegres += buf[z-1];
					}
					if (k==14) {
						longitudeminutes += buf[z-1];
					}
					if (k==15) {
						longitudeminutes += buf[z-1];
						longitudeminutes = (longitudeminutes/60);
					}
					if (k==16) {
						longitudesecondes += buf[z-1];
					}
					if (k==17) {
						longitudesecondes +=buf[z-1];
						longitudesecondes = (longitudesecondes/3600);
					}
					z++;
				}
			//longitude = (longitudedegres.ToDouble()+longitudeminutes.ToDouble()+longitudesecondes.ToDouble());
			}
		MemoLat->Lines->Add(latitude);
		MemoLong->Lines->Add(longitude);
		}

	if (buf[i] == '$' && buf[i+1] == 'S' && buf[i+2] == 'D' && buf[i+3] == 'M' && buf[i+4] == 'T' && buf[i+5] == 'W'){
		int j = i+7;
		for (int t = 0; t < 4; t++)
		{
		   MemoTemp += buf[j];
		   j++;
		}
	MemoTemp->Lines->Add(Temperature);
	}

	if (buf[i] == '$' && buf[i+1] == 'S' && buf[i+2] == 'D' && buf[i+3] == 'D' && buf[i+4] == 'P' && buf[i+5] == 'T'){
		int a = i+9;
		for (int p = 0; p < 2; p++)
		{
		   MemoProf += buf[a];
		   a++;
		}
	MemoProf->Lines->Add(Profondeur);
	}

	str += buf[i];
	i++;

	}while (i < buf.size());

	MemoGlobal->Lines->Add(str);
	}

	trames.clear();

	ReleaseMutex(sync);
}
//---------------------------------------------------------------------------
DWORD WINAPI TForm1::RecvThread(LPVOID params)
{
	TForm1 * form = (TForm1*)params;

	while(1)
	{
		WaitForSingleObject(form->sync, INFINITE);
		form->gps->lirePort();

		std::deque<char> & buf = form->gps->getRecvBuf();
		std::vector<char> trame;

		bool bFound = false;
		int idx = -1;

 		for(int i = 0; i < buf.size(); i++)
		{
			trame.push_back(buf[i]);
			if(buf[i] == '\n' || buf[i] == '\r')
			{
				idx = i + 1;
				bFound = true;
				break;
			}
		}

		if(bFound)
		{
			for(int i = 0; i < idx; i++)
			{
				buf.pop_front();
			}

			while(buf.size() > 0 && buf[0] != '$')
			{
				buf.pop_front();
			}

			form->trames.push_back(trame);
		}

		ReleaseMutex(form->sync);
	}
}
//---------------------------------------------------------------------------


